select name, custid 
from customer
order by 1;

--10000원이하,2개 이상의 구매
select name, count(*), sum(saleprice), max(saleprice), min(saleprice), AVG(saleprice)
from orders o join customer c on (c.custid = o.custid)
where saleprice >10000
group by name
having count(*) > 2
order by name;

select bookname
from orders o join customer c on (c.custid = o.custid) join book b on(o.bookid = b.bookid);
minus
;
select bookname
from orders o join customer c on (c.custid = o.custid) join book b on(o.bookid = b.bookid)
where name like '박지성';

select bookname
from book
where bookid not in(select bookid from customer c join orders o on(c.custid = o.custid) where name = '박지성');

select*
from orders o join customer c on (c.custid = o.custid)join book b on(o.bookid = b.bookid);

select*
from orders o right join customer c on (c.custid = o.custid)
where o.custid is null;

select*
from orders o right join customer c on (c.custid = o.custid)
where name = '박지성';

select*
from orders o right join customer c on (c.custid = o.custid)left join book b on(o.bookid = b.bookid);

select*
from book b left join orders o on(b.bookid = o.bookid) left join customer c on(c.custid = o.custid);

--가장 비싼 도서명
select bookname
from book
where price = (select max(price) from book);

--평균가 이하의 도서명
select bookname
from book
where price < (select avg(price) from book);

--2014.07.01~05 주문정보
select *
from orders
where orderdate between TO_DATE('2014/07/01','yyyy/mm/dd')and TO_DATE('2014/07/05','yyyy/mm/dd');

--2014.07.01~05 외의 주문정보
select *
from orders
where not orderdate between TO_DATE('2014/07/01','yyyy/mm/dd')and TO_DATE('2014/07/05','yyyy/mm/dd');

--주문한 고객명
select name
from customer c join orders o on(c.custid = o.custid);

--주문하지 않은 고객명
select name
from customer c left join orders o on(c.custid = o.custid)
where orderid is null;

--LISTAGG 사용 고객별 주문한 도서명
select name, listagg(bookname,',')within group(order by bookname)as booklist
from customer c join orders o on(c.custid = o.custid) join book b on(b.bookid=o.bookid)
group by name;

--도서명별로 주문한 고객명 순 LISTAGG()사용
select bookname, listagg(name,',')within group(order by name)as name
from customer c join orders o on(c.custid = o.custid) join book b on(b.bookid=o.bookid)
group by bookname;

--도서의 가격과 판매가 차이
select bookname, (price-saleprice)
from book b join orders o on(b.bookid=o.bookid);

--도서의 가격과 판매가 차이가 가장 작은 주문정보
select *
from book b join orders o on(b.bookid=o.bookid)
where (price-saleprice) in (select min(price-saleprice) from book b join orders o on(b.bookid=o.bookid));

--고객명별 구매액 평균
select name, avg(saleprice)
from customer c join orders o on(c.custid = o.custid)
group by name;

--도서의 판매액 평균보다 자신의 구매액 평균이 더 작은 고객명
select name, round(avg(saleprice),1)
from customer c join orders o on(c.custid = o.custid)
group by name
having avg(saleprice) < (select avg(saleprice) from orders);

--고객별 구매한 도서수와 출판사 수
select custid, count(bookname), count(distinct publisher)
from book b join orders o on(b.bookid=o.BOOKID)
group by custid;

--고객번호별 주문한 출판사 수 (단, 그 수가 2개 이상인 고객명)
select c.custid, name, count(distinct publisher)
from book b join orders o on(b.bookid=o.BOOKID) join customer c on(o.custid=c.custid)
group by c.custid, name
having count(distinct publisher)>=2;

--전체 고객의 30%이상 구매한 도서명
select bookname 
from book b join orders o on(b.bookid=o.BOOKID)
group by bookname
having count(distinct o.custid) >= (select count(custid) *0.3 from cusotmer);

--대한미디어 출판사의 도서를 구매한 고객명
select name
from book b join orders o on(b.bookid=o.BOOKID) join customer c on(o.custid=c.custid)
where publisher = '대한미디어';


--모든 도서의 도서정보, 주문정보
select*
from book b left join orders o on(b.bookid=o.BOOKID);

--모든 도서의 도서정보, 주문정보, 고객정보(주문한 고객 포함, 주문하지 않은 고객 빼고)
select*
from book b left join orders o on(b.bookid=o.BOOKID) left join customer c on(o.custid=c.custid);

--박지성이 구매하지 않은 도서명(외부조인)
select*
from book b left join orders o on(b.bookid=o.BOOKID) left join customer c on(o.custid=c.custid)
where name != '박지성' or name is null;

-- COALESCE(A,B):A값이 있으면 A, NULL이면 B로 변환
select*
from book b left join orders o on(b.bookid=o.BOOKID) left join customer c on(o.custid=c.custid)
where coalesce (name,' ')!='박지성';

-- 고객명과 전화번호 출력하되 전화번호가 없으면 (null이면) 전화번호 없음으로 출력
select name, coalesce(phone,'전화번호 없음')
from customer;

--전화번호 없으면 숫자 0으로 출력 [ NVL(A,0) : A의 값이 null이면 숫자 0으로 출력
select name, coalesce(phone,'전화번호 없음'), NVL(phone,0)
from customer;

--도서명,정가,판매가(단,판매되지 않은 도서 포함)
select bookname, price, saleprice
from book b left join orders o on(b.bookid = o.bookid);

--팔리지 않은 도서명,정가,출판사 (right join)
select bookname, price, publisher
from orders o right join book b on(b.bookid = o.bookid)
where orderid is null;

--팔리지 않은 도서명,정가,출판사 (not exists)
select bookname, price, publisher
from book b
where not EXISTS(select 1 from orders o where b.bookid = o.bookid);

CREATE TABLE NewBook(
bookid NUMBER,
bookname varchar2(20),
publisher varchar2(20),
price NUMBER);

drop table NewBook;

CREATE TABLE NewBook(
bookid NUMBER,
bookname varchar2(20),
publisher varchar2(20),
price NUMBER,
primary key (bookid));

--new customer table 만들기
create table newcustomer(
custid number primary key,
name varchar2(40),
address varchar2(40),
phone varchar2(30));

drop table newcustomer;

-외래키는 참조하는 테이블이 이미 만들어져 있어야 하고, 해당 속성이 그 테이블에서 기본키나 유니크로 정의되어 있어야 참조 가능하다.
create table neworders(
orderid number,
custid number not null,
bookid number not null,
saleprice number,
orderdate date,
primary key(orderid),
foreign key(custid) references newcustomer(custid)on delete cascade);

drop table neworders;
drop table newbook;
drop table newcustomer;

create table newbook(
bookid number,
bookname varchar2(20),
publisher varchar2(20),
price number);

alter table newbook add isbn varchar2(13);

desc newbook;

alter table newbook modify isbn number;

desc newbook;

alter table newbook drop column isbn;

desc newbook;

alter table newbook modify bookid number not null;

alter table newbook add primary key(bookid);

delete from book;

create table book2 as select* from book;

desc book2;

-- 11,'스포츠 의학', 한솔의학서적,90000 추가
insert into book2(bookid, bookname, publisher, price) values(11,'스포츠 의학', '한솔의학서적',90000);

-- 앞전의 명령을 취소 : rollback
rollback;

--확인
select*
from book2;

-- 12 번 bookid 추가
insert into book2 values(12,'촌놈의 일상', 'YL일기',35000);

-- 13 번 bookid 추가 (13,'당신은 아름답다', '빛과 소금')
insert into book2(bookid, bookname, publisher) values(13,'당신은 아름답다', '빛과 소금');

-- imported_book 테이블의 내용을 book2테이블에 저장
insert into book2 select bookid, bookname, publisher, price  from IMPORTED_BOOK;

create table customer2 as select* from customer;

select*
from customer2;

update customer2
set address = '대한민국 부산'
where custid=5;

insert into customer2 values(6,'김주희','대한민국 대전','010-1234-5678');

update customer2
set address = '대한민국 서울'
where custid=6;

update customer2
set address = (select address from customer where name='김연아')
where name = '박세리';

select*
from customer2;

--customer2에서 6번 고객 삭제
delete from customer2
where custid = 6;

-- cusmtomer2 내용 모두 삭제
delete from customer2;

-- Rollback은 DML(insert, update, delete)대상을 취소한다
rollback;

delete from customer2
where custid = 5;

select*
from book2;

drop table book2;

--book 테이블을 이용하여 book2테이블을 만들어라
create table book2 as select* from book;

--book2 테이블에서 삼성당 서적 삭제
delete from book2 where publisher ='삼성당';
--book2 테이블에서 '대한미디어' ->'대한출판사'로 변경
update book2
set publisher = '대한출판사'
where publisher = '대한미디어';
--book 테이블에서 이상미디어 서적 삭제 --->참조되는 것이 있기때문에 삭제할 수 없음
delete from book where publisher ='이상미디어';
--book2 테이블에서 이상미디어 서적 삭제 --->참조되는 것이 없기때문에 삭제됨
delete from book2 where publisher ='이상미디어';

--book2 태이블이 bookid를 기본키로 지정
alter table book2 add primary key(bookid);

--orders2테이블의 bookid가 외래키이고 book2테이블의 bookid를 참조 지정
create table orders2 as select* from orders;
alter table orders2 add foreign key(bookid) references book2(bookid);


drop table book2;
create table book2 as select* from book;

select *
from orders2;

select *
from book2;

-- 현제 만들어져 있는 테이블
select* from user_constraints;
